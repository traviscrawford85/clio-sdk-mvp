
import httpx
from typing import Any, Dict, Optional, AsyncIterator
from pydantic import BaseModel
from .utils import PaginatedResponse

class {{ classname | pascalcase }}Api:
    """{{ description }}"""

    def __init__(self, client: httpx.AsyncClient):
        self.client = client

    {% for op in operations %}
    async def {{ op.operation_id | lower }}(
        self{% if op.request_body %}, data: {{ op.request_model|default('BaseModel') }}{% endif %}{% for param in op.parameters %}, {{ param.name }}: {{ param.type|default('str') }}{% endfor %}
    ) -> {{ op.response_model|default('Any') }}:
        """{{ op.summary }}"""
        url = f"{{ op.path.replace('{', '{') }}"
        params: Dict[str, Any] = {
            {% for param in op.parameters if param.in == 'query' %}
            "{{ param.name }}": {{ param.name }},
            {% endfor %}
        }

        response = await self.client.{{ op.method.lower() }}(
            url,
            {% if op.request_body %}json=data.dict(),{% endif %}
            params=params if params else None
        )
        response.raise_for_status()
        return {{ op.response_model|default('response.json()') }}.parse_obj(response.json())

    async def {{ op.operation_id | lower }}_stream(
        self{% for param in op.parameters if param.name in ['page', 'per_page', 'limit', 'offset'] %}, {{ param.name }}: {{ param.type|default('int') }} = 50{% endfor %}
    ) -> AsyncIterator[{{ op.item_model|default('Any') }}]:
        """Stream paginated results from {{ op.operation_id }}."""
        page = 1
        while True:
            result = await self.{{ op.operation_id | lower }}(page=page{% for param in op.parameters if param.name in ['per_page', 'limit'] %}, {{ param.name }}={{ param.name }}{% endfor %})
            for item in result.results:
                yield item
            if not result.results or len(result.results) < {{ param.name if 'per_page' in param.name or 'limit' in param.name else '50' }}:
                break
            page += 1
    {% endfor %}
