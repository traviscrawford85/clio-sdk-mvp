{
  "$schema": "https://raw.githubusercontent.com/github/feedback/discussions/copilot/config-schema.json",
  "configVersion": 1,
  "languageConfigs": {
    "python": {
      "suggestionBehavior": "accept",
      "instructions": [
        {
          "scope": "file",
          "pattern": "scripts/generate_.*\\.py",
          "prompt": "All code generated by scripts in this directory must use async functions, type-safe interfaces, and align with the Clio SDK's unified async architecture."
        },
        {
          "scope": "file",
          "pattern": "clio_sdk/services/.*\\.py",
          "prompt": "Ensure all service classes implement their interfaces asynchronously, using async HTTP calls via AsyncApiClient, and return Pydantic models with full type annotations."
        },
        {
          "scope": "file",
          "pattern": "clio_sdk/adapter_factory/transformers/.*\\.py",
          "prompt": "Transformers should extract fields from Clio models to unified Pydantic models using deterministic key access. Decorate transformers using 'register_transformer'. Keep sync unless explicitly async data is involved."
        },
        {
          "scope": "file",
          "pattern": "clio_sdk/unified_adapters/.*\\.py",
          "prompt": "Adapters must convert between Clio models and internal unified models. Ensure clean, typed conversions. Include import and export functions, and handle nested structures recursively."
        },
        {
          "scope": "file",
          "pattern": "tests/test_.*\\.py",
          "prompt": "Write pytest-compatible async test stubs using `pytest.mark.asyncio`. Validate service methods and adapters. Use fixtures where possible."
        },
        {
          "scope": "directory",
          "pattern": "scripts/",
          "prompt": "This directory contains code generation tools for Clio SDK. All generated outputs must support async client usage, be compliant with Pydantic V2, and match service, adapter, and model structure."
        }
      ]
    }
  }
}
